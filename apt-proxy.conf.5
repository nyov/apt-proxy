.\" Man page copied from apt.conf man page.
.TH "apt-proxy\&.conf" "5" "Sep 2002" "apt-proxy" ""

.SH "NAME"
apt-proxy\&.conf \- configuration file for apt-proxy
.PP

.SH "DESCRIPTION"
\fBapt-proxy\&.conf\fP is the configuration file for apt-proxy; the
only option which cannot be controlled using the configuration file is
the position of the log (sometimes required before apt-proxy reads the
config file).  When the apt-proxy program starts up, it will read
\fB/etc/apt-proxy/apt-proxy\&.conf\fP\&.
.PP
The configuration file is a shell script, which is sourced from
apt-proxy; in effect your configuration file becomes part of the
apt-proxy program\&.
.PP
Changes made to the configuration file will take effect for new connections to
apt-proxy; you do not need to restart or reload inetd for them to take
affect\&.

.PP

.PP
.SH "BACKEND SERVERS"

The supplied apt-proxy\&.conf will work out of the box, but it is suggested you
look for a mirror closer to you\&.  There are some in the default
apt-proxy\&.conf and it may be enough just to reorder the lines in the file\&.
.PP
.TP
.B add_backend \fIbackend-name cache-path-name backend-server ...\fP
\fIbackend-name\fP: Name of the backend\&.  Clients can use this backend by putting an entry like this in their sources\&.list:
.nf
    deb http://\fIservername\fP:9999/\fIbackend-name\fP ...
.fi

\fIcache-path-prefix\fP: the client URI will have the prefix chopped off and
replaced by this to form the location of the cache file\&.  Normally you should
set this to be $APT_PROXY_CACHE/'\fIbackend-name\fP\&.

\fIbackend-server\fP:  
Backend server name(s): the client URI will have the prefix chopped off and
replaced by this name to form the location of the back-end file\&.  If the
download fails from the first server, it will fall back to successive
servers\&.  If one of the server names is prepended by a `\fB+\fP', then it
will always be preferred for fetching Packages, Sources and other control
files\&.  See \fBBACKEND SERVER PROTOCOLS\fP for more details.

.PP
.B Example
.br
This example shows how to give clients access to the main Debian
archive (the backslashes at the end of the lines are important):
.nf

    add_backend /debian/                       \\
         $APT_PROXY_CACHE/debian/              \\
         http://ftp.us.debian.org/debian/      \\
         http://ftp.de.debian.org/debian/      \\
         +ftp.us.debian.org::debian/
.fi

.PP
Using this configuration, the client would use a \fBsources.list\fP entry
like:
.nf

    deb http://server:9999/debian woody main

.fi
And so the file request
`/debian/woody/main/binary-i386/x11/foo_1-1.deb' would turn into a
back-end request of first
.nf

    `http://ftp.us.debian.org/debian/woody/main/binary-i386/x11/foo_1-1.deb'

.fi
and if that failed,
.nf

    `http://ftp.de.debian.org/debian/woody/main/binary-i386/x11/foo_1-1.deb'

.nf
and the file would be placed in
.nf

     `/var/cache/apt-proxy/debian/debian/woody/main/binary-i386/x11/foo_1-1.deb'\&.

.nf

.PP
For many more examples, see the supplied /etc/apt-proxy/apt-proxy\&.conf\&.

.SH "BACKEND SERVER PROTOCOLS"

apt-proxy currently supports 3 types of backends: http, rsync and ftp.
.PP


.B http - http://server.name/path/
.br
http is performed using wget, is fast and does not put much load on the backend
servers.   If a backend supports http, that is the recommended protocol to use.


.PP
.B ftp - ftp://server.name/path/
.br
Ftp also uses wget but takes longer to start because a login sequence is
required first, and apt-proxy does not keep the connection open.

.PP
.B rsync - server.name::path/
.br
rsync is useful for updating files that have only partially changed, but
unfortunatately does not work efficiently with compressed files (unless the
gzip --rsyncable patch makes it into gzip one day..)  Also, there is much more
load put on the backend servers for rsync, and it takes a while to set up each
connection.
.PP
The original apt-proxy used rsync; http/ftp support was added in 1.3.0 but the
default apt-proxy.conf still contained rsync.  
.PP
NOTE: You need to install the \fBrsync\fP package on your system to use rsync
backends.

.PP
.B Combining rsync with http
.br
Currently, the most efficient way to keep apt-proxy's Packages files up to date
for backends with large Packages files (such as Debian main and non-US) is to
use http backend servers but use the special `\fB+\fP' prefix to rsync the
control files.  For this you need both \fBwget\fP and \fBrsync\fP installed.
See the example for the apt-proxy.conf entry.
.PP
Note that most unofficial backends do not have large enough Packages files to
make the extra rsync overhead worthwhile.

.SH "OTHER OPTIONS"
.TP
.B BACKEND_FREQ
BACKEND_FREQ, if set, means that Packages and other control
files will not be synchronized more frequently than this number of
minutes\&.

.TP
.B KEEP_STATS
KEEP_STATS, if set, means that successful transfers from the back-end server
have their numbers printed to the log (total size and speedup factor)\&.

.TP
.B RSYNC_TIMEOUT
RSYNC_TIMEOUT, if set, sets a maximum I/O timeout in seconds for rsync
transfers\&.  This prevents apt-proxy from hanging if an rsync backend server
is misbehaving\&.

.TP
.B WGET_TIMEOUT
WGET_TIMEOUT, if set, sets a maximum I/O timeout in seconds for wget
to connect to a http/ftp backend server\&.

.TP
.B WGET
.br
WGET, if set, lets you specify the path to wget and to add extra options\&.
For example, if you are behind a firewall that does not allow active FTP, use
WGET="wget --passive-ftp"\&. (Note the enclosing `\fB"\fP'; without them
options to wget are ignored\&.)

.TP
.B DEBUG
.br
DEBUG=true will log information about apt-proxy's behaviour, the wget/rsync
commands it is executing to fetch files and about what it is doing\&.  Debug
information is logged to apt-proxy's logfile: /var/log/apt-proxy\&.log

.br
.SH "CLEANUP OPTIONS"
.TP
.B CLEANUP_DAYS
CLEANUP_DAYS, if set, indicates that if we serve a package or
source file, and there are older versions of the same file which have
not been accessed in this many days (beware backup programs which read
all files), they will be deleted, and the result logged.  This is very
conservative and cheap, but is not very intelligent and does not distinguish
between files from separate distributions such as stable, testing, unstable.

.TP
.B CLEAN_SWEEP
CLEAN_SWEEP, if set, indicates that once this number of days has
passed, we should sweep through the base of the cache area (the third
argument to \fIadd_backend\fP above), looking for packages and source
files which have not been accessed in this many days\&. They will be
deleted, and the result logged\&. This is very useful for avoiding the
buildup of obsolete and very infrequently accessed files, such as
sources\&.

.TP
.B MAX_VERSIONS
MAX_VERSIONS, if set, limits the number of versions of each package
to keep in the cache directory\&.  Version purging is carried out immediately
after a new version is downloaded\&.  Unlike CLEANUP_DAYS and CLEAN_SWEEP, this
parameter uses the Packages files to track each distribution separately\&.  For
example, if you have MAX_VERSIONS=3 and are tracking both woody and sarge, the
maximum number of files in the cache for one package will be 6\&.

.SH "FINDING NEW RSYNC BACKEND SERVERS"
.B Old documentation!
.PP
This section was more useful when rsync was the only backend available\&.  Rsync
is not a good idea anymore, becuase http is much more efficient, both in
network load and server load (except when rsyncing uncompressed files such as
Packages)\&.
.PP
If you need to find your backend server, you can look at what an rsync
server is offering using \fBrsync -n <mirror address>::\fP to find available
modules, and \fBrsync -n <mirror address>::<module-name>/\fP to look in
subdirectories\&.  For example:

.nf
$ rsync -n ftp.debian.org::
debian          Debian FTP Archive (~40 GB)
debian-archive  Old Debian FTP Archive (~8 GB)

$ rsync -n ftp.debian.org::debian/
[...]
drwxr-xr-x        4096 2001/11/04 19:12:56 dists
drwxr-xr-x        4096 2000/12/19 21:10:49 pool
drwxr-xr-x        4096 2001/06/11 19:51:48 project
.fi
.PP
Using this information, add backends to apt-proxy\&.conf\&.  For example:
.PP
.nf
    add_backend /main/              \e
        $APT_PROXY_CACHE/debian/      \e
        ftp.us.debian.org::debian/
.fi
.PP
You can use this backend with your \fBapt\fP
clients by placing these lines in \fB/etc/apt/sources.list\fP:
.PP
.nf
   deb http://\fIserver\fP:9999/main woody main non-free contrib
   deb-src http://\fIserver\fP:9999/main woody main non-free contrib
.fi
.PP
.SH "FILES"
/etc/apt-proxy/apt-proxy\&.conf
.PP
.SH "SEE ALSO"
.na
.nh
.BR apt-proxy(8),
.BR /usr/share/doc/apt-proxy/README
.hy
.ad
.PP
.SH "BUGS"
Plently sure.  Please report.
.PP
.SH "AUTHOR"
apt-proxy was written by the Apt-Proxy World Domination Project.
